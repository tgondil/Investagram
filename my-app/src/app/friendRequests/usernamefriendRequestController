// friendRequestController.js

const friendRequestService = require('./friendRequestService'); // Update the path
const userService = require('../userService'); // Update the path

const friendRequestController = {
  async sendFriendRequest(req, res, next) {
    try {
      const { userId } = req.user; // Assuming you have user information in the request, update accordingly
      const recipientId = parseInt(req.params.recipientId);

      // Check if the recipient user exists
      const recipientUser = await userService.getUserById(recipientId);

      if (!recipientUser) {
        return res.status(404).json({ error: 'Recipient user not found' });
      }

      // Check if a friend request has already been sent
      const existingRequest = await friendRequestService.getFriendRequest(userId, recipientId);

      if (existingRequest) {
        return res.status(400).json({ error: 'Friend request already sent' });
      }

      // Send the friend request
      await friendRequestService.sendFriendRequest(userId, recipientId);

      return res.json({ message: 'Friend request sent successfully' });
    } catch (err) {
      return next(err);
    }
  },

  async acceptFriendRequest(req, res, next) {
    try {
      const { userId } = req.user; // Assuming you have user information in the request, update accordingly
      const requestId = parseInt(req.params.requestId);

      // Check if the friend request exists
      const friendRequest = await friendRequestService.getFriendRequestById(requestId);

      if (!friendRequest || friendRequest.recipient_id !== userId) {
        return res.status(404).json({ error: 'Friend request not found' });
      }

      // Accept the friend request
      await friendRequestService.acceptFriendRequest(requestId);

      return res.json({ message: 'Friend request accepted successfully' });
    } catch (err) {
      return next(err);
    }
  },

  async rejectFriendRequest(req, res, next) {
    try {
      const { userId } = req.user; // Assuming you have user information in the request, update accordingly
      const requestId = parseInt(req.params.requestId);

      // Check if the friend request exists
      const friendRequest = await friendRequestService.getFriendRequestById(requestId);

      if (!friendRequest || friendRequest.recipient_id !== userId) {
        return res.status(404).json({ error: 'Friend request not found' });
      }

      // Reject the friend request
      await friendRequestService.rejectFriendRequest(requestId);

      return res.json({ message: 'Friend request rejected successfully' });
    } catch (err) {
      return next(err);
    }
  },
};

module.exports = friendRequestController;
