const request = require('supertest');
const app = require('../your-app'); // Update the path to your Express app
const userService = require('../services/userService'); // Update the path
const emailService = require('../controllers/emailService'); // Update the path
const authController = require('../controllers/authController'); // Update the path

// Mocking user data for testing
const mockUser = {
  id: 1,
  email: 'test@example.com',
  username: 'testuser',
  password: '$2a$12$NnA3fYQF/r3BK9fyjwRRmO9IB77Ir4mgh9ftR2y1of7WxphzrOIkW', // bcrypt hash
};

jest.mock('../services/userService', () => ({
  getUserByEmail: jest.fn((email) => {
    if (email === mockUser.email) {
      return mockUser;
    }
    return null;
  }),
  updateUserPassword: jest.fn(),
}));

jest.mock('../controllers/emailService', () => ({
  sendEmail: jest.fn(),
}));

describe('Password Reset and Username Recovery Tests', () => {
  describe('POST /api/reset-password', () => {
    it('should send a password reset email when given a valid email', async () => {
      const response = await request(app)
        .post('/api/reset-password')
        .send({ email: mockUser.email });

      expect(response.status).toBe(200);
      expect(response.body.message).toBe('Password reset email sent successfully');
      expect(emailService.sendEmail).toHaveBeenCalledWith(
        mockUser.email,
        'Password Reset',
        expect.stringContaining('reset-password?token=')
      );
    });

    it('should return an error for an invalid email format', async () => {
      const response = await request(app)
        .post('/api/reset-password')
        .send({ email: 'invalid-email' });

      expect(response.status).toBe(400);
      expect(response.body.error).toBe('Invalid email format');
      expect(emailService.sendEmail).not.toHaveBeenCalled();
    });

    it('should return an error for a nonexistent user', async () => {
      const response = await request(app)
        .post('/api/reset-password')
        .send({ email: 'nonexistent@example.com' });

      expect(response.status).toBe(404);
      expect(response.body.error).toBe('User not found');
      expect(emailService.sendEmail).not.toHaveBeenCalled();
    });
  });

  describe('POST /api/recover-username', () => {
    it('should send a username recovery email when given a valid email', async () => {
      const response = await request(app)
        .post('/api/recover-username')
        .send({ email: mockUser.email });

      expect(response.status).toBe(200);
      expect(response.body.message).toBe('Username recovery email sent successfully');
      expect(emailService.sendEmail).toHaveBeenCalledWith(
        mockUser.email,
        'Username Reminder',
        expect.stringContaining('Your username is: ')
      );
    });

    it('should return an error for an invalid email format', async () => {
      const response = await request(app)
        .post('/api/recover-username')
        .send({ email: 'invalid-email' });

      expect(response.status).toBe(400);
      expect(response.body.error).toBe('Invalid email format');
      expect(emailService.sendEmail).not.toHaveBeenCalled();
    });

    it('should return an error for a nonexistent user', async () => {
      const response = await request(app)
        .post('/api/recover-username')
        .send({ email: 'nonexistent@example.com' });

      expect(response.status).toBe(404);
      expect(response.body.error).toBe('User not found');
      expect(emailService.sendEmail).not.toHaveBeenCalled();
    });
  });
});
